@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@using FptwHotels.Auth
@using Microsoft.AspNetCore.Components.Authorization

<nav class="navbar">
    <div class="navbar-top">
        <h1>Hotels</h1>
    </div>
    <ul class="navbar-links">
        <li class="navbar-link">
            <Icon Name="IconName.Home"/>
            <NavLink href="/">
                <span>Home</span>
            </NavLink>
        </li>

        <UserLevelLimitView MinLevel="UserLevel.Reception">
            <h5 class="navbar-heading">Reception</h5>
            <li class="navbar-link">
                <Icon Name="IconName.Bars"/>
                <NavLink href="reservations">
                    <span>Reservations</span>
                </NavLink>
            </li>
            <li class="navbar-link">
                <Icon Name="IconName.Key"/>
                <NavLink href="rooms">
                    <span>Rooms</span>
                </NavLink>
            </li>
        </UserLevelLimitView>
    </ul>
    <hr/>
    <div class="navbar-links">
        <AuthorizeView>
            <Authorized>
                <span>Logged in as @context.User.Identity!.Name</span>
                <a href="#" @onclick="async () => await HandleLogout()">Log out</a>
            </Authorized>
            <NotAuthorized>
                <span>Not logged in.</span>
                <span>
                    <a href="/login">Log in</a>
                    &bullet;
                    <a href="/register">Register</a>
                </span>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</nav>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private async Task HandleLogout()
    {
        await ((HotelAuthenticationStateProvider)AuthStateProvider).EndUserSession();
    }

}