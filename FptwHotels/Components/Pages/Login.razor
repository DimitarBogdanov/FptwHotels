@page "/Login"
@using FptwHotels.Auth
@using FptwHotels.Data
@using FptwHotels.ViewModels
@using Microsoft.AspNetCore.Components.Authorization

@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login - FPTW Hotels</PageTitle>

<h1>Login</h1>

@if (_pageError != "")
{
    <div class="alert">
        <strong>Error:</strong>
        &nbsp;
        <span>@_pageError</span>
        <br/>
    </div>
}

<EditForm method="post" OnSubmit="@LoginUser" Model="@Model" FormName="LoginForm">
    <fieldset class="form">
        <label for="email">
            <div>Email</div>
            <InputText type="email" id="email" DisplayName="Email" @bind-Value="@Model!.Email"/>
            <ValidationMessage For="@(() => Model!.Email)"></ValidationMessage>
        </label>
        <label for="password" class="mb-8">
            <div>Password</div>
            <InputText type="password" id="password" DisplayName="Password" @bind-Value="@Model!.Password"/>
            <ValidationMessage For="@(() => Model!.Password)"></ValidationMessage>
        </label>
    </fieldset>
    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>

<span>No account?</span>
<NavLink href="/register">Register</NavLink>

@code {
    private bool _isLoading;
    private string _pageError = string.Empty;
    
    [SupplyParameterFromForm]
    public LoginFormModel? Model { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new LoginFormModel();
    }

    private async Task LoginUser(EditContext editContext)
    {
        _pageError = string.Empty;
        
        bool isValid = editContext.Validate();

        if (!isValid || Model == null)
        {
            return;
        }

        _isLoading = true;
        
        try
        {
            UserAccount user = await AccountService.LoginUser(Model.Email, Model.Password);

            await ((HotelAuthenticationStateProvider) AuthStateProvider).StartUserSession(user);
            
            _isLoading = false;
            
            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception e)
        {
            _pageError = e.Message;
            _isLoading = false;
            StateHasChanged();
        }
    }

}